"use strict";(self.webpackChunkquad_docs=self.webpackChunkquad_docs||[]).push([[763],{7229:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>h});var a=n(4848),i=n(8453),s=n(3554),d=n.n(s);const r={sidebar_position:1},c="Editing Tags",l={id:"getting-stared/edit-tags",title:"Editing Tags",description:"Making a Datapack",source:"@site/docs/getting-stared/edit-tags.mdx",sourceDirName:"getting-stared",slug:"/getting-stared/edit-tags",permalink:"/quad-docs/getting-stared/edit-tags",draft:!1,unlisted:!1,editUrl:"https://github.com/LieOnLion/quad-docs/tree/main/docs/getting-stared/edit-tags.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/quad-docs/category/getting-started"},next:{title:"List of Tags",permalink:"/quad-docs/getting-stared/list-of-tags"}},o={},h=[{value:"Making a Datapack",id:"making-a-datapack",level:2},{value:"Actually Editing Tags",id:"actually-editing-tags",level:2},{value:"The Basics",id:"the-basics",level:3},{value:"More Advanced",id:"more-advanced",level:3}];function m(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"editing-tags",children:"Editing Tags"}),"\n",(0,a.jsx)(t.h2,{id:"making-a-datapack",children:"Making a Datapack"}),"\n",(0,a.jsx)(t.p,{children:"To add any kind of item, block or enchantment to their respective tags, you first need a Datapack."}),"\n",(0,a.jsxs)(t.p,{children:["There are a multitude of tutorials you can watch, but I recommend this one by ",(0,a.jsx)(t.a,{href:"https://www.youtube.com/@Legitimoose",children:"Legitimoose"}),"."]}),"\n",(0,a.jsx)(t.admonition,{title:"Don't need Mc Functions",type:"danger",children:(0,a.jsx)(t.p,{children:"Stop as he starts making mc-functions, we will not be using them.\r\nAnd we don't need the mc-functions extention"})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(d(),{controls:!0,url:"https://www.youtube.com/embed/ac6V5-KT6Rg?si=qTIiymW8mqQJOafZ"}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"actually-editing-tags",children:"Actually Editing Tags"}),"\n",(0,a.jsx)(t.h3,{id:"the-basics",children:"The Basics"}),"\n",(0,a.jsxs)(t.p,{children:['All Quad tags are under the "name space" of ',(0,a.jsx)(t.code,{children:"quad:"}),". Create a folder called ",(0,a.jsx)(t.code,{children:"tags"}),", making a path of ",(0,a.jsx)(t.code,{children:"data/quad/tags/"}),". In the ",(0,a.jsx)(t.code,{children:"tags"})," folder you can create the respective folders for what you wish to add."]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["For block tags create a folder called ",(0,a.jsx)(t.code,{children:"blocks"})]}),"\n",(0,a.jsxs)(t.li,{children:["For item tags create a folder called ",(0,a.jsx)(t.code,{children:"items"})]}),"\n",(0,a.jsxs)(t.li,{children:["For enchantment tags create a folder called ",(0,a.jsx)(t.code,{children:"enchantment"})]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["When you see a ",(0,a.jsx)(t.code,{children:"/"})," slash in a path, it means its a new folder, tag files will only contain letters, numbers or ",(0,a.jsx)(t.code,{children:"_"})," underscores, and anything before a ",(0,a.jsx)(t.code,{children:":"}),' colon would be the "name space" (e.g. ',(0,a.jsx)(t.code,{children:"quad:<tag_path>"}),")"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",metastring:'title=" example_tag.json"',children:'{\r\n  "replace": false,\r\n  "values": [\r\n    "minecraft:example_item_1",\r\n    "minecraft:example_item_2"\r\n  ]\r\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Here is an ",(0,a.jsx)(t.code,{children:"example_tag"}),". Find a tag you want to edit in ",(0,a.jsx)(t.a,{href:"/getting-stared/list-of-tags",children:"#List of Tags"})," (I will choose ",(0,a.jsx)(t.code,{children:"immune/fire"}),"). For my tag, ",(0,a.jsx)(t.code,{children:"immune/"})," is another folder, so we need to create that in ",(0,a.jsx)(t.code,{children:"quad/tags/items"}),". When in the correct path, create a new file, name it the tag you wish (in my case ",(0,a.jsx)(t.code,{children:"fire"}),") and end it with ",(0,a.jsx)(t.code,{children:".json"}),". This is important."]}),"\n",(0,a.jsxs)(t.p,{children:["Hover over the ",(0,a.jsx)(t.code,{children:"example_tag"})," code and you should see a copy button, paste it into the new file."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"minecraft:"}),' is the "name space" or "mod id", and ',(0,a.jsx)(t.code,{children:"example_item"}),' is the "item id". For items and blocks you can see the "name space" and "item id" in the inventory with ',(0,a.jsx)(t.code,{children:"advanced tooltips"}),' (shown with f3 + h).\r\nFor enchantments, the "item id" is (usually) the name, e.g. ',(0,a.jsx)(t.code,{children:"minecraft:fire_aspect"}),". (you can see the full list of enchantments with ",(0,a.jsx)(t.code,{children:"/enchant @s"}),")"]}),"\n",(0,a.jsxs)(t.p,{children:["Each new ",(0,a.jsx)(t.code,{children:"value"})," needs to be seperated with a ",(0,a.jsx)(t.code,{children:","})," comma, with the last value ending without one."]}),"\n",(0,a.jsx)(t.h3,{id:"more-advanced",children:"More Advanced"}),"\n",(0,a.jsxs)(t.p,{children:["Remove the line ",(0,a.jsx)(t.code,{children:'"replace": false,'})," to remove any other mods/datapacks adding items to the tag, only items in your file will be applied."]}),"\n",(0,a.jsxs)(t.p,{children:["Adding items in other tags can be done by putting a ",(0,a.jsx)(t.code,{children:"#"}),' hashtag before the "name space", e.g. ',(0,a.jsx)(t.code,{children:"#minecraft:planks"}),". However, usually you would want to add a little extra safety with adding other tags."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",metastring:'title=" example_tag_2.json"',children:'{\r\n  "replace": false,\r\n  "values": [\r\n    {\r\n      "id": "#minecraft:example_tag",\r\n      "required": false\r\n    },\r\n    "minecraft:example_item_3",\r\n    "minecraft:example_item_4"\r\n  ]\r\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["With this, ",(0,a.jsx)(t.code,{children:"example_item"})," from ",(0,a.jsx)(t.code,{children:"1-4"})," will have the tag, ",(0,a.jsx)(t.code,{children:"1-2"})," loaded from the first ",(0,a.jsx)(t.code,{children:"example_tag"}),". If for any reason ",(0,a.jsx)(t.code,{children:"example_tag"})," doesn't exist or has an error, ",(0,a.jsx)(t.code,{children:"example_item"}),", ",(0,a.jsx)(t.code,{children:"3"})," and ",(0,a.jsx)(t.code,{children:"4"})," will still be loaded into the tag and ",(0,a.jsx)(t.code,{children:"example_tag"})," will be ignored."]})]})}function g(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}}}]);